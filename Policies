function sendRemindersFiltered() {
  const SHEET_POLICIES = 'Policies';
  const SHEET_TEMPLATE = 'Template_Rinnovo_Polizza';
  const SHEET_LOGS = 'Logs';
  const ss = SpreadsheetApp.getActiveSpreadsheet();

  const sheet = ss.getSheetByName(SHEET_POLICIES);
  const templateSheet = ss.getSheetByName(SHEET_TEMPLATE);
  let logSheet = ss.getSheetByName(SHEET_LOGS);

  if (!sheet) throw new Error(`Sheet "${SHEET_POLICIES}" not found!`);
  if (!templateSheet) throw new Error(`Sheet "${SHEET_TEMPLATE}" not found!`);

  // --- Create Logs sheet if missing ---
  if (!logSheet) {
    logSheet = ss.insertSheet(SHEET_LOGS);
    logSheet.appendRow(["Timestamp", "Email", "Client", "PolicyID", "EndDate", "DaysToEnd", "Status"]);
  }

  const startTime = new Date();
  Logger.log("🚀 Script started at " + startTime);

  const lastRow = sheet.getLastRow();
  const lastCol = sheet.getLastColumn();
  if (lastRow < 2) {
    Logger.log("⚠️ No data rows found.");
    return;
  }

  const data = sheet.getRange(1, 1, lastRow, lastCol).getValues();

  // --- Load email template ---
  const templateValues = templateSheet.getRange("A1:A").getValues().flat().filter(String);
  const subjectTemplate = templateValues[0];
  const bodyTemplate = templateValues.slice(1).join("\n");

  if (!subjectTemplate || !bodyTemplate) {
    throw new Error("❌ Template missing subject or body in Template_Rinnovo_Polizza sheet");
  }

  // --- Prepare constants ---
  const MS_PER_DAY = 1000 * 60 * 60 * 24;
  const today = new Date();
  const t0 = new Date(today.getFullYear(), today.getMonth(), today.getDate());

  let sentCount = 0;
  let skippedCount = 0;
  let totalChecked = 0;

  const updates = [];
  const logs = [];

  // --- Main loop ---
  for (let r = 1; r < data.length; r++) {
    totalChecked++;
    const row = data[r];

    const policyId = row[0];     // A - Policy ID
    const client   = row[1];     // B - Client Name
    let email      = row[2];     // C - Email
    const endDate  = row[3];     // D - End Date
    const daysCell = row[4];     // E - DaysToEnd
    let renewal    = (row[5] || "").toString().trim(); // F - RenewalSent
    const lastContact = row[6];  // G - LastContact

    if (typeof email === 'string') email = email.trim();
    if (!email) continue; // no email → skip

    if (renewal === "Да") renewal = "Yes";
    if (!renewal) renewal = "No";

    // Skip if already contacted
    if (renewal === "Yes" || lastContact) {
      logs.push([new Date(), email, client, policyId, endDate, "", "Already contacted"]);
      continue;
    }

    // --- Calculate daysToEnd ---
    let daysToEnd = null;
    if (endDate instanceof Date) {
      const t1 = new Date(endDate.getFullYear(), endDate.getMonth(), endDate.getDate());
      daysToEnd = Math.ceil((t1 - t0) / MS_PER_DAY);
    } else if (!isNaN(daysCell)) {
      daysToEnd = Number(daysCell);
    }

    if (daysToEnd === null || isNaN(daysToEnd)) {
      skippedCount++;
      logs.push([new Date(), email, client, policyId, endDate, "", "Invalid date"]);
      continue;
    }

    // --- Check condition for sending ---
    if (daysToEnd <= 7) {
      const formattedDate = Utilities.formatDate(endDate, Session.getScriptTimeZone(), "dd/MM/yyyy");

      const subject = subjectTemplate
        .replace(/{{ClientName}}/g, client)
        .replace(/{{PolicyID}}/g, policyId)
        .replace(/{{EndDate}}/g, formattedDate);

      const body = bodyTemplate
        .replace(/{{ClientName}}/g, client)
        .replace(/{{PolicyID}}/g, policyId)
        .replace(/{{EndDate}}/g, formattedDate);

      try {
        GmailApp.sendEmail(email, subject, "", { htmlBody: body });
        Logger.log(`📨 Sent → ${email}`);
        sentCount++;

        updates.push([r + 1, "Yes", new Date()]);
        logs.push([new Date(), email, client, policyId, endDate, daysToEnd, "Sent"]);
      } catch (err) {
        Logger.log(`❗ Error sending to ${email}: ${err.message}`);
        logs.push([new Date(), email, client, policyId, endDate, daysToEnd, "Error: " + err.message]);
      }
    } else {
      logs.push([new Date(), email, client, policyId, endDate, daysToEnd, "Not yet"]);
    }
  }

  // --- Batch updates ---
  updates.forEach(([row, renewal, date]) => {
    sheet.getRange(row, 6, 1, 2).setValues([[renewal, date]]);
  });

  if (logs.length > 0) {
    logSheet.getRange(logSheet.getLastRow() + 1, 1, logs.length, logs[0].length).setValues(logs);
  }

  const duration = ((new Date() - startTime) / 1000).toFixed(2);
  Logger.log(`📊 Checked: ${totalChecked}, Sent: ${sentCount}, Skipped: ${skippedCount}`);
  Logger.log(`✅ Completed in ${duration} seconds.`);
}
